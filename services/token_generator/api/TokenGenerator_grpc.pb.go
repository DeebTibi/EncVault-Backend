// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: services/token_generator/api/TokenGenerator.proto

package TokenGenerator

import (
	context "context"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TokenGenerator_CreateUserToken_FullMethodName   = "/TokenGenerator/CreateUserToken"
	TokenGenerator_ValidateUserToken_FullMethodName = "/TokenGenerator/ValidateUserToken"
)

// TokenGeneratorClient is the client API for TokenGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type TokenGeneratorClient interface {
	// Sends a greeting
	CreateUserToken(ctx context.Context, in *CreateUserTokenRequest, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	// Sends another greeting
	ValidateUserToken(ctx context.Context, in *ValidateUserTokenRequest, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
}

type tokenGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenGeneratorClient(cc grpc.ClientConnInterface) TokenGeneratorClient {
	return &tokenGeneratorClient{cc}
}

func (c *tokenGeneratorClient) CreateUserToken(ctx context.Context, in *CreateUserTokenRequest, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, TokenGenerator_CreateUserToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenGeneratorClient) ValidateUserToken(ctx context.Context, in *ValidateUserTokenRequest, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, TokenGenerator_ValidateUserToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenGeneratorServer is the server API for TokenGenerator service.
// All implementations must embed UnimplementedTokenGeneratorServer
// for forward compatibility.
//
// The greeting service definition.
type TokenGeneratorServer interface {
	// Sends a greeting
	CreateUserToken(context.Context, *CreateUserTokenRequest) (*wrappers.StringValue, error)
	// Sends another greeting
	ValidateUserToken(context.Context, *ValidateUserTokenRequest) (*wrappers.BoolValue, error)
	mustEmbedUnimplementedTokenGeneratorServer()
}

// UnimplementedTokenGeneratorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTokenGeneratorServer struct{}

func (UnimplementedTokenGeneratorServer) CreateUserToken(context.Context, *CreateUserTokenRequest) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserToken not implemented")
}
func (UnimplementedTokenGeneratorServer) ValidateUserToken(context.Context, *ValidateUserTokenRequest) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateUserToken not implemented")
}
func (UnimplementedTokenGeneratorServer) mustEmbedUnimplementedTokenGeneratorServer() {}
func (UnimplementedTokenGeneratorServer) testEmbeddedByValue()                        {}

// UnsafeTokenGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenGeneratorServer will
// result in compilation errors.
type UnsafeTokenGeneratorServer interface {
	mustEmbedUnimplementedTokenGeneratorServer()
}

func RegisterTokenGeneratorServer(s grpc.ServiceRegistrar, srv TokenGeneratorServer) {
	// If the following call pancis, it indicates UnimplementedTokenGeneratorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TokenGenerator_ServiceDesc, srv)
}

func _TokenGenerator_CreateUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenGeneratorServer).CreateUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenGenerator_CreateUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenGeneratorServer).CreateUserToken(ctx, req.(*CreateUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenGenerator_ValidateUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenGeneratorServer).ValidateUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenGenerator_ValidateUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenGeneratorServer).ValidateUserToken(ctx, req.(*ValidateUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenGenerator_ServiceDesc is the grpc.ServiceDesc for TokenGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TokenGenerator",
	HandlerType: (*TokenGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserToken",
			Handler:    _TokenGenerator_CreateUserToken_Handler,
		},
		{
			MethodName: "ValidateUserToken",
			Handler:    _TokenGenerator_ValidateUserToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/token_generator/api/TokenGenerator.proto",
}
