// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: services/key_maker/api/KeyMaker.proto

package KeyMaker

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KeyMaker_CreateUserFromKey_FullMethodName   = "/KeyMaker/CreateUserFromKey"
	KeyMaker_GetUserEncryptedKey_FullMethodName = "/KeyMaker/GetUserEncryptedKey"
	KeyMaker_ChangeUserKey_FullMethodName       = "/KeyMaker/ChangeUserKey"
)

// KeyMakerClient is the client API for KeyMaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type KeyMakerClient interface {
	// Sends a greeting
	CreateUserFromKey(ctx context.Context, in *CreateUserKeyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Sends another greeting
	GetUserEncryptedKey(ctx context.Context, in *GetUserEncryptedKeyRequest, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	// Given the clients old key
	ChangeUserKey(ctx context.Context, in *ChangeUserKeyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type keyMakerClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyMakerClient(cc grpc.ClientConnInterface) KeyMakerClient {
	return &keyMakerClient{cc}
}

func (c *keyMakerClient) CreateUserFromKey(ctx context.Context, in *CreateUserKeyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, KeyMaker_CreateUserFromKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyMakerClient) GetUserEncryptedKey(ctx context.Context, in *GetUserEncryptedKeyRequest, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, KeyMaker_GetUserEncryptedKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyMakerClient) ChangeUserKey(ctx context.Context, in *ChangeUserKeyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, KeyMaker_ChangeUserKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyMakerServer is the server API for KeyMaker service.
// All implementations must embed UnimplementedKeyMakerServer
// for forward compatibility.
//
// The greeting service definition.
type KeyMakerServer interface {
	// Sends a greeting
	CreateUserFromKey(context.Context, *CreateUserKeyRequest) (*empty.Empty, error)
	// Sends another greeting
	GetUserEncryptedKey(context.Context, *GetUserEncryptedKeyRequest) (*wrappers.StringValue, error)
	// Given the clients old key
	ChangeUserKey(context.Context, *ChangeUserKeyRequest) (*empty.Empty, error)
	mustEmbedUnimplementedKeyMakerServer()
}

// UnimplementedKeyMakerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeyMakerServer struct{}

func (UnimplementedKeyMakerServer) CreateUserFromKey(context.Context, *CreateUserKeyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserFromKey not implemented")
}
func (UnimplementedKeyMakerServer) GetUserEncryptedKey(context.Context, *GetUserEncryptedKeyRequest) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEncryptedKey not implemented")
}
func (UnimplementedKeyMakerServer) ChangeUserKey(context.Context, *ChangeUserKeyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserKey not implemented")
}
func (UnimplementedKeyMakerServer) mustEmbedUnimplementedKeyMakerServer() {}
func (UnimplementedKeyMakerServer) testEmbeddedByValue()                  {}

// UnsafeKeyMakerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyMakerServer will
// result in compilation errors.
type UnsafeKeyMakerServer interface {
	mustEmbedUnimplementedKeyMakerServer()
}

func RegisterKeyMakerServer(s grpc.ServiceRegistrar, srv KeyMakerServer) {
	// If the following call pancis, it indicates UnimplementedKeyMakerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeyMaker_ServiceDesc, srv)
}

func _KeyMaker_CreateUserFromKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyMakerServer).CreateUserFromKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyMaker_CreateUserFromKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyMakerServer).CreateUserFromKey(ctx, req.(*CreateUserKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyMaker_GetUserEncryptedKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserEncryptedKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyMakerServer).GetUserEncryptedKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyMaker_GetUserEncryptedKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyMakerServer).GetUserEncryptedKey(ctx, req.(*GetUserEncryptedKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyMaker_ChangeUserKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyMakerServer).ChangeUserKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyMaker_ChangeUserKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyMakerServer).ChangeUserKey(ctx, req.(*ChangeUserKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyMaker_ServiceDesc is the grpc.ServiceDesc for KeyMaker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyMaker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KeyMaker",
	HandlerType: (*KeyMakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserFromKey",
			Handler:    _KeyMaker_CreateUserFromKey_Handler,
		},
		{
			MethodName: "GetUserEncryptedKey",
			Handler:    _KeyMaker_GetUserEncryptedKey_Handler,
		},
		{
			MethodName: "ChangeUserKey",
			Handler:    _KeyMaker_ChangeUserKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/key_maker/api/KeyMaker.proto",
}
